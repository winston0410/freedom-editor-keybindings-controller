const e=(e,t)=>e.length===t.length&&e.every((e,o)=>e===t[o]),t=(e,t,o)=>{if(e.preventDefault(),t.nextElementSibling)o.shiftBlockFocus(t,"down",t.nextElementSibling);else{const e=o.renderBlock(o.options.defaultBlock);o.shiftBlockFocus(t,"down",e)}},o=(e,t,o)=>{""===e.target.textContent&&(o.removeBlock(t),e.preventDefault())},n=(e,t,o)=>{e.preventDefault(),t.previousElementSibling&&o.shiftBlockFocus(t,"up",t.previousElementSibling)},i=(e,t,o)=>{e.preventDefault(),t.nextElementSibling&&o.shiftBlockFocus(t,"down",t.nextElementSibling)},l=(e,t,o)=>{e.preventDefault(),t.previousElementSibling&&o.moveBlock(t,"up")},s=(e,t,o)=>{e.preventDefault(),t.nextElementSibling&&o.moveBlock(t,"down")};class c{constructor(e){const c={keybindings:{newDefaultBlock:{inputCombination:["Enter"],callback:t},removeBlock:{inputCombination:["Backspace"],callback:o},focusPreviousField:{inputCombination:["ArrowUp"],callback:n},focusNextField:{inputCombination:["ArrowDown"],callback:i},moveFocusedBlockUp:{inputCombination:["Shift","ArrowUp"],callback:l},moveFocusedBlockDown:{inputCombination:["Shift","ArrowDown"],callback:s}},debounceLimit:200};if(this.options={...c,...e},void 0===this.options.editor)throw new Error('You need to pass FreedomEditor instance as the value of property "editor" in "options" object.')}init=t=>{const o=[];t.addEventListener("keydown",t=>{const n=t.target.closest("[data-block-type]"),i=this.options.editor;t.repeat||o.push(t.key);for(const l in this.options.keybindings)e(o,this.options.keybindings[l].inputCombination)&&this.options.keybindings[l].callback(t,n,i)}),t.addEventListener("keyup",e=>{const t=o.indexOf(e.key);o.splice(t,1)})}}export{c as FreedomEditorKeyBindings};
